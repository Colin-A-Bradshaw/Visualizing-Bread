#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.1
#  in conjunction with Tcl version 8.6
#    Apr 25, 2021 05:39:07 PM EDT  platform: Windows NT
from PIL import Image, ImageTk

import numpy as np
import pandas as pd
import io
import plotly.io as pio
#pio.renderers.default = "pdf"
import plotly.express as px


import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import GUI_Viz_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    GUI_Viz_support.set_Tk_var()
    top = Toplevel1 (root)
    GUI_Viz_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    GUI_Viz_support.set_Tk_var()
    top = Toplevel1 (w)
    GUI_Viz_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("1200x750+156+60")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1,  1)
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        self.df_all_data = pd.read_csv('AllNeeded.csv', sep='~')
        self.df_last_query = None
        self.datapoints = None
        flour_types = []
        leaven_types = []
        with io.open('FlourTypes.txt', 'r', encoding='utf8') as file:
            for line in file:
                flour_types = line.split('~')
        file.close()
        self.flour_types = flour_types
        with io.open('LeaveningAgents.txt', 'r', encoding='utf8') as file:
            for line in file:
                leaven_types = line.split('~')
        file.close()
        self.leaven_types = leaven_types
        for_viz = [self.df_all_data['type of flour'], self.df_all_data['leavening agent'], self.df_all_data['rating']]
        headers = ['type of flour', 'leavening agent', 'rating']
        df_for_viz = pd.concat(for_viz, axis=1, keys=headers)
        fig2 = px.parallel_categories(df_for_viz, dimensions_max_cardinality=300,)
        fig2.show()
        fig = px.parallel_categories(df_for_viz, dimensions=['type of flour', 'leavening agent', 'rating'],
                                     dimensions_max_cardinality=100,
                                     color='rating', color_continuous_scale=px.colors.diverging.RdYlGn,
                                     color_continuous_midpoint=6 / 2,
                                     labels={'type of flour': 'type of flour','leavening agent': 'leavening agent',
                                     'ratings': 'ratings'})
        fig.show()
        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.025, rely=0.027, relheight=0.965
                , relwidth=0.968)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")

        self.Frame2 = tk.Frame(self.Frame1)
        self.Frame2.place(relx=0.017, rely=0.028, relheight=0.269, relwidth=0.33)

        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")

        self.flour_list_box = tk.Listbox(self.Frame2)
        self.flour_list_box.place(relx=0.026, rely=0.051, relheight=0.882
                , relwidth=0.469)
        self.flour_list_box.configure(background="white")
        self.flour_list_box.configure(disabledforeground="#a3a3a3")
        self.flour_list_box.configure(font="TkFixedFont")
        self.flour_list_box.configure(foreground="#000000")
        self.flour_list_box.configure(highlightbackground="#d9d9d9")
        self.flour_list_box.configure(highlightcolor="black")
        self.flour_list_box.configure(selectbackground="blue")
        self.flour_list_box.configure(selectforeground="white")
        self.flour_list_box.configure(selectmode='multiple')
        flour_counter = 0
        while flour_counter < len(flour_types) - 1:
            self.flour_list_box.insert(flour_counter, flour_types[flour_counter])
            flour_counter += 1

        self.flour_exclusive_check_box = tk.Checkbutton(self.Frame2)
        self.flour_exclusive_check_box.place(relx=0.547, rely=0.154
                , relheight=0.128, relwidth=0.344)
        self.flour_exclusive_check_box.configure(activebackground="#ececec")
        self.flour_exclusive_check_box.configure(activeforeground="#000000")
        self.flour_exclusive_check_box.configure(background="#d9d9d9")
        self.flour_exclusive_check_box.configure(disabledforeground="#a3a3a3")
        self.flour_exclusive_check_box.configure(foreground="#000000")
        self.flour_exclusive_check_box.configure(highlightbackground="#d9d9d9")
        self.flour_exclusive_check_box.configure(highlightcolor="black")
        self.flour_exclusive_check_box.configure(justify='left')
        self.flour_exclusive_check_box.configure(text='''Exclusive Selection''')
        self.flour_exclusive_check_box.configure(variable=GUI_Viz_support.che56)

        self.Label1 = tk.Label(self.Frame2)
        self.Label1.place(relx=0.521, rely=0.41, height=51, width=170)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Select the types of flour you would like to include in the visualization''')
        self.Label1.configure(wraplength="150")

        self.flour_save_button = tk.Button(self.Frame2)
        self.flour_save_button.place(relx=0.573, rely=0.821, height=24
                , width=127)
        self.flour_save_button.configure(activebackground="#ececec")
        self.flour_save_button.configure(activeforeground="#000000")
        self.flour_save_button.configure(background="#d9d9d9")
        self.flour_save_button.configure(command=lambda:GUI_Viz_support.save_flour(self.flour_list_box.curselection()))
        self.flour_save_button.configure(disabledforeground="#a3a3a3")
        self.flour_save_button.configure(foreground="#000000")
        self.flour_save_button.configure(highlightbackground="#d9d9d9")
        self.flour_save_button.configure(highlightcolor="black")
        self.flour_save_button.configure(pady="0")
        self.flour_save_button.configure(text='''Save flour selection''')

        self.Frame3 = tk.Frame(self.Frame1)
        self.Frame3.place(relx=0.37, rely=0.028, relheight=0.269, relwidth=0.342)

        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#d9d9d9")
        self.Frame3.configure(highlightbackground="#d9d9d9")
        self.Frame3.configure(highlightcolor="black")

        self.leavening_list_box = tk.Listbox(self.Frame3)
        self.leavening_list_box.place(relx=0.025, rely=0.051, relheight=0.574
                , relwidth=0.937)
        self.leavening_list_box.configure(background="white")
        self.leavening_list_box.configure(disabledforeground="#a3a3a3")
        self.leavening_list_box.configure(font="TkFixedFont")
        self.leavening_list_box.configure(foreground="#000000")
        self.leavening_list_box.configure(highlightbackground="#d9d9d9")
        self.leavening_list_box.configure(highlightcolor="black")
        self.leavening_list_box.configure(selectbackground="blue")
        self.leavening_list_box.configure(selectforeground="white")
        self.leavening_list_box.configure(selectmode='multiple')
        leaven_counter = 0
        while leaven_counter < len(leaven_types) - 1:
            self.leavening_list_box.insert(leaven_counter, leaven_types[leaven_counter])
            leaven_counter += 1

        self.leavening_exclusive_check_box = tk.Checkbutton(self.Frame3)
        self.leavening_exclusive_check_box.place(relx=0.05, rely=0.667
                , relheight=0.128, relwidth=0.32)
        self.leavening_exclusive_check_box.configure(activebackground="#ececec")
        self.leavening_exclusive_check_box.configure(activeforeground="#000000")
        self.leavening_exclusive_check_box.configure(background="#d9d9d9")
        self.leavening_exclusive_check_box.configure(disabledforeground="#a3a3a3")
        self.leavening_exclusive_check_box.configure(foreground="#000000")
        self.leavening_exclusive_check_box.configure(highlightbackground="#d9d9d9")
        self.leavening_exclusive_check_box.configure(highlightcolor="black")
        self.leavening_exclusive_check_box.configure(justify='left')
        self.leavening_exclusive_check_box.configure(text='''Exclusive Selection''')
        self.leavening_exclusive_check_box.configure(variable=GUI_Viz_support.che57)

        self.Label2 = tk.Label(self.Frame3)
        self.Label2.place(relx=0.529, rely=0.667, height=51, width=176)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Select the types of leavening you would like to include in the visualization''')
        self.Label2.configure(wraplength="150")

        self.save_leavening_selection = tk.Button(self.Frame3)
        self.save_leavening_selection.place(relx=0.05, rely=0.821, height=24
                , width=139)
        self.save_leavening_selection.configure(activebackground="#ececec")
        self.save_leavening_selection.configure(activeforeground="#000000")
        self.save_leavening_selection.configure(background="#d9d9d9")
        self.save_leavening_selection.configure(command=lambda:GUI_Viz_support.save_leavening(self.leavening_list_box.curselection()))
        self.save_leavening_selection.configure(disabledforeground="#a3a3a3")
        self.save_leavening_selection.configure(foreground="#000000")
        self.save_leavening_selection.configure(highlightbackground="#d9d9d9")
        self.save_leavening_selection.configure(highlightcolor="black")
        self.save_leavening_selection.configure(pady="0")
        self.save_leavening_selection.configure(text='''Save leavening selection''')

        self.Frame4 = tk.Frame(self.Frame1)
        self.Frame4.place(relx=0.723, rely=0.028, relheight=0.268
                , relwidth=0.255)
        self.Frame4.configure(relief='groove')
        self.Frame4.configure(borderwidth="2")
        self.Frame4.configure(relief="groove")
        self.Frame4.configure(background="#d9d9d9")
        self.Frame4.configure(highlightbackground="#d9d9d9")
        self.Frame4.configure(highlightcolor="black")

        self.Label3 = tk.Label(self.Frame4)
        self.Label3.place(relx=0.101, rely=0.052, height=51, width=254)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Select the range of ratings you would like to include in the visualization''')
        self.Label3.configure(wraplength="200")

        self.from_entry = tk.Entry(self.Frame4)
        self.from_entry.place(relx=0.169, rely=0.412, height=20, relwidth=0.115)
        self.from_entry.configure(background="white")
        self.from_entry.configure(disabledforeground="#a3a3a3")
        self.from_entry.configure(font="TkFixedFont")
        self.from_entry.configure(foreground="#000000")
        self.from_entry.configure(highlightbackground="#d9d9d9")
        self.from_entry.configure(highlightcolor="black")
        self.from_entry.configure(insertbackground="black")
        self.from_entry.configure(selectbackground="blue")
        self.from_entry.configure(selectforeground="white")

        self.to_entry = tk.Entry(self.Frame4)
        self.to_entry.place(relx=0.169, rely=0.567, height=20, relwidth=0.115)
        self.to_entry.configure(background="white")
        self.to_entry.configure(disabledforeground="#a3a3a3")
        self.to_entry.configure(font="TkFixedFont")
        self.to_entry.configure(foreground="#000000")
        self.to_entry.configure(highlightbackground="#d9d9d9")
        self.to_entry.configure(highlightcolor="black")
        self.to_entry.configure(insertbackground="black")
        self.to_entry.configure(selectbackground="blue")
        self.to_entry.configure(selectforeground="white")

        self.group_by_entry = tk.Entry(self.Frame4)
        self.group_by_entry.place(relx=0.541, rely=0.464, height=20
                , relwidth=0.182)
        self.group_by_entry.configure(background="white")
        self.group_by_entry.configure(disabledforeground="#a3a3a3")
        self.group_by_entry.configure(font="TkFixedFont")
        self.group_by_entry.configure(foreground="#000000")
        self.group_by_entry.configure(highlightbackground="#d9d9d9")
        self.group_by_entry.configure(highlightcolor="black")
        self.group_by_entry.configure(insertbackground="black")
        self.group_by_entry.configure(selectbackground="blue")
        self.group_by_entry.configure(selectforeground="white")

        self.Label4 = tk.Label(self.Frame4)
        self.Label4.place(relx=0.034, rely=0.412, height=21, width=34)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''from''')

        self.Label5 = tk.Label(self.Frame4)
        self.Label5.place(relx=0.034, rely=0.567, height=21, width=34)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(text='''to''')

        self.Label6 = tk.Label(self.Frame4)
        self.Label6.place(relx=0.405, rely=0.361, height=21, width=134)
        self.Label6.configure(activebackground="#f9f9f9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="black")
        self.Label6.configure(text='''Group by Intervals of''')

        self.Label7 = tk.Label(self.Frame4)
        self.Label7.place(relx=0.372, rely=0.567, height=61, width=164)
        self.Label7.configure(activebackground="#f9f9f9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="black")
        self.Label7.configure(text='''(Enter a number that evenly divides the selected range, use 0.01 for no grouping)''')
        self.Label7.configure(wraplength="150")

        self.visualize_button = tk.Button(self.Frame1)
        self.visualize_button.place(relx=0.473, rely=0.318, height=24, width=67)
        self.visualize_button.configure(activebackground="#ececec")
        self.visualize_button.configure(activeforeground="#000000")
        self.visualize_button.configure(background="#d9d9d9")
        self.visualize_button.configure(command=lambda:GUI_Viz_support.viz_button_clicked(self))
        self.visualize_button.configure(disabledforeground="#a3a3a3")
        self.visualize_button.configure(foreground="#000000")
        self.visualize_button.configure(highlightbackground="#d9d9d9")
        self.visualize_button.configure(highlightcolor="black")
        self.visualize_button.configure(pady="0")
        self.visualize_button.configure(text='''Visualize''')

        self.narrow_results_checkbutton = tk.Checkbutton(self.Frame1)
        self.narrow_results_checkbutton.place(relx=0.267, rely=0.318
                , relheight=0.036, relwidth=0.199)
        self.narrow_results_checkbutton.configure(activebackground="#ececec")
        self.narrow_results_checkbutton.configure(activeforeground="#000000")
        self.narrow_results_checkbutton.configure(background="#d9d9d9")
        self.narrow_results_checkbutton.configure(disabledforeground="#a3a3a3")
        self.narrow_results_checkbutton.configure(foreground="#000000")
        self.narrow_results_checkbutton.configure(highlightbackground="#d9d9d9")
        self.narrow_results_checkbutton.configure(highlightcolor="black")
        self.narrow_results_checkbutton.configure(justify='left')
        self.narrow_results_checkbutton.configure(state='disabled')
        self.narrow_results_checkbutton.configure(text='''Narrow the results of the last query''')
        self.narrow_results_checkbutton.configure(variable=GUI_Viz_support.che45)

        self.datapointBox = tk.Listbox(self.Frame1)
        self.datapointBox.place(relx=0.026, rely=0.373, relheight=0.597
                                , relwidth = 0.95)
        self.datapointBox.configure(background="white")
        self.datapointBox.configure(disabledforeground="#a3a3a3")
        self.datapointBox.configure(font="TkFixedFont")
        self.datapointBox.configure(foreground="#000000")
        self.datapointBox.configure(highlightbackground="#d9d9d9")
        self.datapointBox.configure(highlightcolor="black")
        self.datapointBox.configure(selectbackground="blue")
        self.datapointBox.configure(selectforeground="white")


if __name__ == '__main__':
    vp_start_gui()





